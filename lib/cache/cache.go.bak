// Package router accepts a string and returns a cached value.
package cache

import (
	"echo/lib/concat"
	"fmt"
	"github.com/spaolacci/murmur3"
	"gopkg.in/gin-gonic/gin.v1"
	"gopkg.in/redis.v5"
	"os"
	"strconv"
)

//Init function of package -- set needs variables/config
func init() {
	var RedisHost string = concat.Concat(
		os.Getenv("ECHO_REDIS_HOST"),
		":",
		os.Getenv("ECHO_REDIS_PORT"),
	)
	var Client = redis.NewClient(&redis.Options{
		Addr:     RedisHost,
		Password: "",
		DB:       0,
	})
}

// Look up a key in redis and return its value.
func Lookup(hash string) string {
	value, _ := Client.Get(hash).Result()
	return value
}

// Delete a Key, return 1 for sucess and 0 for failure.
func Delete(hash string, Client *redis.Client) int64 {
	success, _ := Client.Del(hash).Result()
	return success
}

// Create new key/value or update existing one.
func Set(hash string, value string, Client *redis.Client) string {
	status, _ := Client.Set(hash, value, 0).Result()
	return status
}

// Generates murmur3 hash of the url, passed to the func as a string
func genHash(urlString string) uint64 {
	data := []byte(urlString)
	return murmur3.Sum64(data)
}

// Process request context objects, check for cache.
func Process(c *gin.Context, Client *redis.Client) {
	var url string = concat.Concat(
		c.Request.Host,
		c.Request.URL.Path,
	)
	var hash string = strconv.Itoa(int(genHash(url)))
	value := Lookup(hash)
	fmt.Println(value)
}
